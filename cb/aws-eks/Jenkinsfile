
pipeline {
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '5', numToKeepStr: '5')
        timeout(5)
    }
    environment {
        caFile = 'ca.pem'
        changeRoot = 'cb/aws-eks/'
        scmVars = ''
        changeSetFolders = ''
        applications = ''
        commit= ''
        previousCommit = ''
        fullFolder = ''
    }
    libraries {
        lib('jenkins-pipeline-library@master')
    }
    agent {
        kubernetes {
            label 'jenkins-env-pipeline'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: hub
    image: caladreas/hub
    command:
    - cat
    tty: true
  - name: helm
    image: caladreas/helm:2.11.0
    command:
    - cat
    tty: true
  - name: jpb
    image: caladreas/jpb
    command:
    - cat
    tty: true
"""
        }
    }
    stages {
        stage('SCM') {
            steps {
                script {
                    scmVars = checkout scm
                    echo "scmVars=${scmVars}"
                    commit = "${scmVars.GIT_COMMIT}"
                }
            }
        }
        stage('Prepare Master') { 
            when {
                branch 'master'
            }
            steps {
                script {
                    previousCommit = "${scmVars.GIT_PREVIOUS_COMMIT}"
                }
            }
        }
        stage('Prepare') {
            steps {
                script {
                    def changeSetData = sh returnStdout: true, script: "git diff-tree --no-commit-id --name-only -r ${commit} ${previousCommit}"
                    changeSetData = changeSetData.replace("\n", "\\n")
                    container('jpb') {
                        changeSetFolders = sh returnStdout: true, script: "/usr/bin/jpb/bin/jpb GitChangeListToFolder '${changeSetData}' '${changeRoot}'"
                        changeSetFolders = changeSetFolders.split(',')
                    }
                    
                    def data = readYaml file: "${changeRoot}prod.yml"
                    applications = data.applications
                }
            }
        }
        stage('Evaluate PR') {
            when { 
                changeRequest() 
            }
            environment {
                CA_PEM=credentials('letsencrypt-staging-ca')
                CM=credentials('chartmuseum')
            }
            steps {
                container('helm') {
                    sh 'cp ${CA_PEM} ${caFile}'
                    sh 'helm repo add chartmuseum https://charts.kearos.net --username ${CM_USR} --password ${CM_PSW}  --ca-file ${caFile}'
                    sh 'helm repo list'
                    sh 'helm repo update'

                    script {
                        changeSetFolders.each {
                            def folder = "${it}"
                            folder = folder.replace("\n", "")
                            folder = folder.trim()
                            fullFolder = "${changeRoot}${folder}"
                            fullFolder.trim()
                            sh "cp ${CA_PEM} ${fullFolder}//${caFile}"
                            
                            echo "Change in folder ${folder} - see if it matching folders that are installed in PROD"
                            applications.each {
                                def app = "${it}"
                                app = app.trim()
                                if ("${folder}" == "${app}") {
                                    dir("${fullFolder}") {
                                        sh './install.sh --dry-run --debug'    
                                    } // end dir
                                } // end if
                            } // end applications.each
                        } // end changeSetFolders.each
                    }
                }
            }
        }
        stage('Perform PROD Update') {
            when {
                branch 'master'
            }
            environment {
                CA_PEM=credentials('letsencrypt-staging-ca')
                CM=credentials('chartmuseum')
            }
            steps {
                container('helm') {
                    sh 'cp ${CA_PEM} ${caFile}'
                    sh 'helm repo add chartmuseum https://charts.kearos.net --username ${CM_USR} --password ${CM_PSW}  --ca-file ${caFile}'
                    sh 'helm repo list'
                    sh 'helm repo update'

                    // TODO: deduplicate via shared lib
                    script {
                        changeSetFolders.each {
                            def folder = "${it}"
                            folder = folder.replace("\n", "")
                            folder = folder.trim()
                            fullFolder = "${changeRoot}${folder}"
                            fullFolder.trim()
                            sh "cp ${CA_PEM} ${fullFolder}//${caFile}"
                            
                            echo "Change in folder ${folder} - see if it matching folders that are installed in PROD"
                            applications.each {
                                def app = "${it}"
                                app = app.trim()
                                if ("${folder}" == "${app}") {
                                    dir("${fullFolder}") {
                                        sh './install.sh'
                                    } // end dir
                                } // end if
                            } // end applications.each
                        } // end changeSetFolders.each
                    }
                }
            }
        }
    }
}