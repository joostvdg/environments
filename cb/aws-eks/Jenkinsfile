def scmVars
def changeSetFolders = ''
def applications = ''

pipeline {
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '5', numToKeepStr: '5')
        timeout(5)
    }
    libraries {
        lib('jenkins-pipeline-library@master')
    }
    agent {
        kubernetes {
            label 'jenkins-env-pipeline'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: hub
    image: caladreas/hub
    command:
    - cat
    tty: true
  - name: helm
    image: caladreas/helm:2.11.0
    command:
    - cat
    tty: true
"""
        }
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    scmVars = checkout scm
                    echo "scmVars=${scmVars}"
                    // we need the previous commit, as that is the branch from which the PR originates
                    // the current commit is the PR and not a valid object
                    // "fatal: bad object ..."
                    
                    def changeSetData = sh returnStdout: true, script: "git diff-tree --no-commit-id --name-only -r ${scmVars.GIT_PREVIOUS_COMMIT}"
                    changeSetData = changeSetData.replace("\n", "\\n")
                    container('jpb') {
                        changeSetFolders = sh returnStdout: true, script: "/usr/bin/jpb/bin/jpb GitChangeListToFolder '${changeSetData}' 'cb/aws-eks/'"
                        changeSetFolders = changeSetFolders.split(',')
                    }
                    // changeSetFolders = parseChangeSetForFolders("${changeSetData}", "cb/aws-eks/")
                    dir('cb/aws-eks/') {
                        def data = readYaml file: 'prod.yml'
                        applications = data.applications
                    }
                }
            }
        }
        stage('Evaluate PR') {
            when { 
                changeRequest() 
            }
            steps {
                script {
                    currentBuild.displayName = "${env.CHANGE_ID} - ${env.CHANGE_TITLE}"
                    // look at changeSetFolders
                    // compare to prod.yml
                    // for each match, execute ${folder}/install.sh
                    echo sh(returnStdout: true, script: 'env')
                    container('helm') {
                        dir('cb/aws-eks') {
                            withCredentials([file(credentialsId: 'letsencrypt-staging-ca', variable: 'CA_PEM')]) {
                                withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                    sh "helm repo add chartmuseum https://charts.kearos.net --username ${USR} --password ${PSS}  --ca-file ${CA_PEM}"
                                }
                                sh 'helm repo list'
                                sh 'helm repo update'
                                withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                    applications.each {
                                        def app = "${it}"
                                        folders.each {
                                            if (app.equals("${it}")) {
                                                dir(folder) {
                                                    sh "install.sh --dry-run --debug"
                                                } // end dir
                                            } // end if
                                        } // end folders.each
                                    } // end app.each
                                } //end with with cred (chart)
                            } // end with cred (ca)
                        } // end dir
                    } // end container
                } // end script
            }
        }
        stage('Perform PROD Update') {
            when {
                branch 'master'
            }
            steps {
                container('helm') {
                    dir('cb/aws-eks') {
                        withCredentials([file(credentialsId: 'letsencrypt-staging-ca', variable: 'CA_PEM')]) {
                            withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                sh "helm repo add chartmuseum https://charts.kearos.net --username ${USR} --password ${PSS}  --ca-file ${CA_PEM}"
                            }
                            sh 'helm repo list'
                            sh 'helm repo update'
                            withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                applications.each {
                                    def app = "${it}"
                                    folders.each {
                                        if (app.equals("${it}")) {
                                            dir(folder) {
                                                sh "install.sh --dry-run --debug"
                                            } // end dir
                                        } // end if
                                    } // end folders.each
                                } // end app.each
                            }
                        }
                    }
                }
            }
        }
    }
}