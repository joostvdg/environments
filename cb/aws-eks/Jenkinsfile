def scmVars
def changeSetFolders = ''
def applications = ''

pipeline {
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '5', numToKeepStr: '5')
        timeout(5)
    }
    libraries {
        lib('jenkins-pipeline-library@master')
    }
    agent {
        kubernetes {
            label 'jenkins-env-pipeline'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: hub
    image: caladreas/hub
    command:
    - cat
    tty: true
  - name: helm
    image: caladreas/helm:2.11.0
    command:
    - cat
    tty: true
  - name: jpb
    image: caladreas/jpb
    command:
    - cat
    tty: true
"""
        }
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    scmVars = checkout scm
                    echo "scmVars=${scmVars}"
                    def commit = "${scmVars.GIT_COMMIT}"
                    // def commit = "${scmVars.GIT_PREVIOUS_COMMIT}"
                    // if (commit.equals('null')) {
                    //     commit = "${scmVars.GIT_COMMIT}"
                    // }
                    
                    def changeSetData = sh returnStdout: true, script: "git diff-tree --no-commit-id --name-only -r ${commit}"
                    changeSetData = changeSetData.replace("\n", "\\n")
                    container('jpb') {
                        changeSetFolders = sh returnStdout: true, script: "/usr/bin/jpb/bin/jpb GitChangeListToFolder '${changeSetData}' 'cb/aws-eks/'"
                        changeSetFolders = changeSetFolders.split(',')
                    }
                    // changeSetFolders = parseChangeSetForFolders("${changeSetData}", "cb/aws-eks/")
                    dir('cb/aws-eks/') {
                        def data = readYaml file: 'prod.yml'
                        applications = data.applications
                        echo "Found applications: ${applications}"
                    }
                }
            }
        }
        stage('Evaluate PR') {
            when { 
                changeRequest() 
            }
            steps {
                script {
                    currentBuild.displayName = "${env.CHANGE_ID} - ${env.CHANGE_TITLE}"
                    // look at changeSetFolders
                    // compare to prod.yml
                    // for each match, execute ${folder}/install.sh
                    echo sh(returnStdout: true, script: 'env')
                    container('helm') {
                        changeSetFolders.each {
                            def folder = "${it}"
                            def fullFolder = "cb/aws-eks/${folder}"
                            def caFile = 'ca.pem'
                            folder = folder.trim()
                            echo "Change in folder ${folder} - see if it matching folders that are installed in PROD"
                            withCredentials([file(credentialsId: 'letsencrypt-staging-ca', variable: 'CA_PEM')]) {
                                sh "cp ${CA_PEM} ${caFile}"
                                withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                    sh "helm repo add chartmuseum https://charts.kearos.net --username ${USR} --password ${PSS}  --ca-file ${caFile}"
                                }
                                sh 'helm repo list'
                                sh 'helm repo update'
                                sh "cp ${CA_PEM} ${fullFolder}/${caFile}"
                                sh "ls -lath ${fullFolder}/${caFile}"
                            }
                            applications.each {
                                // TODO: remove debug
                                def app = "${it}"
                                app = app.trim()
                                echo "App=${app}"
                                if ("${folder}" == "${app}") {
                                    echo "Going to dry-run an update to app ${app}"
                                    dir("${fullFolder}") {
                                        sh 'ls -lath'
                                        // TODO: make sharedlib functions
                                        echo "Verifying if there are folder changes we need to dry-run"
                                        sh 'install.sh --dry-run --debug'    
                                        // withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                        // } //end with with cred (chart)
                                        // } // end with cred (ca)
                                    } // end dir
                                } // end if
                            } // end applications.each
                        } // end changeSetFolders.each
                    } // end container
                } // end script
            }
        }
        stage('Perform PROD Update') {
            when {
                branch 'master'
            }
            steps {
                container('helm') {
                    script {
                        dir('cb/aws-eks') {
                            withCredentials([file(credentialsId: 'letsencrypt-staging-ca', variable: 'CA_PEM')]) {
                                withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                    sh "helm repo add chartmuseum https://charts.kearos.net --username ${USR} --password ${PSS}  --ca-file ${CA_PEM}"
                                }
                                sh 'helm repo list'
                                sh 'helm repo update'
                                withCredentials([usernamePassword(credentialsId: 'chartmuseum', passwordVariable: 'PSS', usernameVariable: 'USR')]) {
                                    applications.each {
                                        def app = "${it}"
                                        changeSetFolders.each {
                                            if (app.equals("${it}")) {
                                                dir(folder) {
                                                    sh 'install.sh'
                                                } // end dir
                                            } // end if
                                        } // end changeSetFolders.each
                                    } // end app.each
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}